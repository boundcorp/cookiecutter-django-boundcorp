# -- Server replicas
replicas:
  backend: 2
  frontend: 1
  qcluster: 1
# -- Custom priority class for different treatment by the scheduler
priorityClassName:

image:
  repository: registry.gitlab.com/{{cookiecutter.ci_project_path}}/{{cookiecutter.ci_project_name}}
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: "gitlab-pull-secret"

worker:
  # -- worker replicas
  replicas: 1
  # -- Custom priority class for different treatment by the scheduler
  priorityClassName:

ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  hostname: {{cookiecutter.production_hostname}}
  tls:
    - hosts: ["{{cookiecutter.production_hostname}}"]
      secretName: "{{cookiecutter.ci_project_name}}-tls"

env:
  APP_HOSTNAME: {{cookiecutter.production_hostname}}
  DATABASE_URL: postgresql://{{cookiecutter.ci_project_name}}:{{cookiecutter.ci_project_name}}@{{cookiecutter.ci_project_name}}-postgresql:5432/{{cookiecutter.ci_project_name}}
  # -- Secret key used for cookie singing and unique user IDs,
  # don't change this after the first install
  SECRET_KEY: ""
  MINIO_STORAGE_ENDPOINT: {{cookiecutter.ci_project_name}}-minio:9000
  MINIO_STORAGE_ACCESS_KEY: {{cookiecutter.ci_project_name}}
  MINIO_STORAGE_SECRET_KEY: {{cookiecutter.ci_project_name}}-secret
  MINIO_STORAGE_MEDIA_BUCKET_NAME: assets
  MINIO_STORAGE_USE_HTTPS: false
  MINIO_STORAGE_AUTO_CREATE_MEDIA_BUCKET: true
  MINIO_STORAGE_MEDIA_URL: "https://{{cookiecutter.production_hostname}}/assets"
  MINIO_STORAGE_MEDIA_USE_PRESIGNED: true


envFrom: []
#  - configMapRef:
#      name: special-config

envValueFrom: {}

service:
  backend:
    enabled: true
    type: ClusterIP
    port: 8000
    name: http
    protocol: TCP
    labels: {}
    annotations: {}
  frontend:
    enabled: true
    type: ClusterIP
    port: 3000
    name: http
    protocol: TCP
    labels: {}
    annotations: {}

volumes: []

volumeMounts: []

# -- affinity applied to the deployments
affinity: {}

# -- nodeSelector applied to the deployments
nodeSelector: {}

resources:
  server: {}
  worker: {}

livenessProbe:
  # -- enables or disables the livenessProbe
  enabled: true
  httpGet:
    path: /healthz/
    port: http
  initialDelaySeconds: 20
  periodSeconds: 10

readinessProbe:
  enabled: true
  httpGet:
    path: /healthz/
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5

serviceAccount:
  # -- Service account is needed for managed outposts
  create: true

prometheus:
  serviceMonitor:
    create: false
    interval: 30s
    scrapeTimeout: 3s
  rules:
    create: false

postgresql:
  # -- enable the bundled bitnami postgresql chart
  enabled: true
  global:
    postgresql:
      auth:
        postgresPassword: "{{cookiecutter.ci_project_name}}"
        username: "{{cookiecutter.ci_project_name}}"
        password: "{{cookiecutter.ci_project_name}}"
        database: "{{cookiecutter.ci_project_name}}"

minio:
  # -- enable the bundled bitnami minio chart
  enabled: true
  rootUser: "{{cookiecutter.ci_project_name}}"
  rootPassword: "{{cookiecutter.ci_project_name}}-secret"
  mode: standalone
  replicas: 1
  buckets:
    - name: assets
