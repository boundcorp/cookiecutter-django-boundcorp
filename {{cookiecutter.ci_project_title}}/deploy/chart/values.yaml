# -- Server replicas
replicas: 3
# -- Custom priority class for different treatment by the scheduler
priorityClassName:

image:
  repository: registry.gitlab.com/{{cookiecutter.ci_project_path}}
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: "gitlab-{{cookiecutter.ci_project_title}}"

worker:
  # -- worker replicas
  replicas: 1
  # -- Custom priority class for different treatment by the scheduler
  priorityClassName:

ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  hostname: {{cookiecutter.production_hostname}}
  tls:
    - hosts: []
      secretName: ""

{{cookiecutter.ci_project_title}}:
  # -- Log level for server and worker
  log_level: info
  # -- Secret key used for cookie singing and unique user IDs,
  # don't change this after the first install
  secret_key: ""
  email:
    # -- SMTP Server notifications are sent from, fully optional
    host: ""
    port: 587
    # -- SMTP credentials, when left empty, not authentication will be done
    username: ""
    # -- SMTP credentials, when left empty, not authentication will be done
    password: ""
    # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
    use_tls: false
    # -- Enable either use_tls or use_ssl, they can't be enabled at the same time.
    use_ssl: false
    # -- Connection timeout
    timeout: 30
    # -- Email from address, can either be in the format "foo@bar.baz" or "authentik <foo@bar.baz>"
    from: ""
  postgresql:
    # -- set the postgresql hostname to talk to
    # if unset and .Values.postgresql.enabled == true, will generate the default
    host: '{{cookiecutter.ci_project_title}}-postgresql'
    # -- postgresql Database name
    name: "{{cookiecutter.ci_project_title}}"
    # -- postgresql Username
    user: "{{cookiecutter.ci_project_title}}"
    password: ""
    port: 5432
    s3_backup:
      # -- optional S3 backup, access key
      access_key: ""
      # -- optional S3 backup, secret key
      secret_key: ""
      # -- optional S3 backup, bucket
      bucket: ""
      # -- optional S3 backup, region
      region: ""
      # -- optional S3 backup, host, including protocol (https://minio.domain.tld)
      host: ""
      # -- optional S3 backup, location in the bucket
      # @default -- `"/"`
      location: ""
      # -- optional S3 backup, set to `true` to disable SSL certificate verification
      insecure_skip_verify: false
  redis:
    # -- set the redis hostname to talk to
    host: '{{ cookiecutter.ci_project_title }}-redis-master'
    password: ""

env:
  APP_HOSTNAME: {{cookiecutter.production_hostname}}

envFrom: []
#  - configMapRef:
#      name: special-config

envValueFrom: {}

service:
  # -- Service that is created to access the deployment
  enabled: true
  type: ClusterIP
  port: 80
  name: http
  protocol: TCP
  labels: {}
  annotations: {}

volumes: []

volumeMounts: []

# -- affinity applied to the deployments
affinity: {}

# -- nodeSelector applied to the deployments
nodeSelector: {}

resources:
  server: {}
  worker: {}

livenessProbe:
  # -- enables or disables the livenessProbe
  enabled: false
  httpGet:
    path: /healthz/
    port: http
  initialDelaySeconds: 20
  periodSeconds: 10

readinessProbe:
  enabled: false
  httpGet:
    path: /healthz/
    port: http
  initialDelaySeconds: 10
  periodSeconds: 5

serviceAccount:
  # -- Service account is needed for managed outposts
  create: true

prometheus:
  serviceMonitor:
    create: false
    interval: 30s
    scrapeTimeout: 3s
  rules:
    create: false

postgresql:
  # -- enable the bundled bitnami postgresql chart
  enabled: false
  postgresqlUsername: "{{cookiecutter.ci_project_title}}"
  # postgresqlPassword: ""
  postgresqlDatabase: "{{cookiecutter.ci_project_title}}"
  persistence:
    enabled: true
  #   storageClass:
  #   accessModes:
  #     - ReadWriteOnce