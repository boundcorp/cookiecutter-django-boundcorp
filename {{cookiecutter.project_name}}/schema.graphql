schema {
  query: Query
  mutation: Mutation
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

union CreateUserResult = UserProfile | Error

scalar DateTime

type Error {
  message: String!
}

scalar ExpectedErrorType

scalar GenericScalar

type Mutation {
  register(email: String!, username: String!, firstName: String!, lastName: String!, password1: String!, password2: String!): Register
  verifyAccount(token: String!): VerifyAccount
  tokenAuth(password: String!, email_Iexact: String, username_Iexact: String): ObtainJSONWebToken
  verifyToken(token: String!): VerifyToken
  refreshToken(refreshToken: String!): RefreshToken
  resendActivationEmail(email: String!): ResendActivationEmail
  sendPasswordResetEmail(email: String!): SendPasswordResetEmail
  passwordReset(token: String!, newPassword1: String!, newPassword2: String!): PasswordReset
  passwordChange(oldPassword: String!, newPassword1: String!, newPassword2: String!): PasswordChange
  updateAccount(firstName: String, lastName: String): UpdateAccount
  createUser(input: CreateUserInput): CreateUserResult
}

interface Node {
  id: ID!
}

type ObtainJSONWebToken {
  token: String
  success: Boolean
  errors: ExpectedErrorType
  user: UserNode
  unarchiving: Boolean
  refreshToken: String
}

type PasswordChange {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

type PasswordReset {
  success: Boolean
  errors: ExpectedErrorType
}

type Query {
  myProfile: UserProfile
}

type RefreshToken {
  token: String
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
}

type Register {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

type ResendActivationEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type SendPasswordResetEmail {
  success: Boolean
  errors: ExpectedErrorType
}

scalar UUID

type UpdateAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type UserNode implements Node {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  id: ID!
  lastLogin: DateTime
  isActive: Boolean!
  dateJoined: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type UserProfile {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  id: UUID!
  verified: Boolean
}

type VerifyAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type VerifyToken {
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
}
